import React, { useState as useStateMock } from 'react';
import userEvent from '@testing-library/user-event';
import '@testing-library/jest-dom';
import {
  cleanup,
  fireEvent,
  prettyDOM,
  render,
  screen,
  within,
} from '@testing-library/react';

import VideosList, { VideosListProps } from './videosList';

const mockVideoBookmarks = [
  {
    id: 'id0001',
    title: 'first video title',
    createdAt: '2022-07-23T04:02:16.413Z',
    timestamp: [],
    url: 'https://www.youtube.com/watch?v=testvideo1',
  },
  {
    id: 'id0002',
    title: 'second video title',
    createdAt: '2022-07-23T04:02:54.179Z',
    timestamp: [],
    url: 'https://www.youtube.com/watch?v=testvideo2',
  },
];

const user = userEvent.setup();

const mockProps = (mockFn: jest.Mock<any, any>) => ({
  tabId: 1,
  excludeVideoId: undefined,
  videoBookmarks: mockVideoBookmarks,
  setVideoBookmarks: mockFn,
});

const setup = (props: VideosListProps) => {
  render(<VideosList {...props} />);
};

describe('delete video from bookmarked list', () => {
  beforeEach(() => {});
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  afterEach(() => {
    cleanup();
    jest.clearAllMocks();
  });

  // setup(props);
  // fit.each`
  //   input                         | expected
  //   ${mockedVideoBookmarks[0].id} | ${mockedVideoBookmarks[0].id}
  // `(
  //   'delete video $input, setVideoBookmarks called with $expected',
  //   ({ input, expected }) => {
  //     const deleteIcon = screen.getAllByRole('button', { name: /delete/i })[0];
  //   }
  // );

  it(`delete video ${mockVideoBookmarks[0].id}, setVideoBookmarks with ${mockVideoBookmarks[0].id} `, () => {
    const mockSetState = jest.fn();
    setup(mockProps(mockSetState));

    const videoId = mockVideoBookmarks[0].id;
    const deleteIcon = screen.getAllByRole('button', { name: /delete/i })[0]; // sorted by date
    console.log(prettyDOM(deleteIcon));
    fireEvent.click(deleteIcon);

    expect(mockSetState).toHaveBeenCalledTimes(1);
    expect(mockSetState).not.toHaveBeenCalledWith(
      expect.arrayContaining([
        expect.objectContaining({
          id: videoId,
        }),
      ])
    );
  });
});

// describe('BookmarkedVideosList', () => {
//   /* eslint-disable testing-library/no-render-in-setup */
//   beforeEach(() => {
//     const setState = jest.fn();
//     const props = {
//       tabId: 1,
//       excludeVideoId: undefined,
//       videoBookmarks: videoBookmarksData,
//       setVideoBookmarks: setState,
//     };
//     setup(props);
//   });
//   /* eslint-enable testing-library/no-render-in-setup */
//   afterEach(() => cleanup());

//   it.each(videoBookmarksData)('display video title', ({ title }) => {
//     // console.log('title: ', title);
//     expect(screen.getByText(title)).toBeInTheDocument();
//   });

//   it('delete first video', () => {
//     // console.log('title: ', title);
//     const id = videoBookmarksData[0].id;
//     const title = videoBookmarksData[0].title;
//     // const button = screen.getByRole('img', {
//     //   name: `delete-video-${id}`,
//     // });
//     const icon = screen.getAllByRole('img', { name: /delete/i })[0];
//     console.log(prettyDOM(icon));

//     user.click(icon);

//     expect(screen.getByText(title)).not.toBeInTheDocument();
//   });
